.merge-request
  = render "projects/merge_requests/show/mr_title"
  = render "projects/merge_requests/show/how_to_merge"
  = render "projects/merge_requests/show/mr_box"
  = render "projects/merge_requests/show/state_widget"
  = render "projects/merge_requests/show/commits"
  = render "projects/merge_requests/show/participants"

  - if @commits.present?
    %ul.nav.nav-tabs
      %li.notes-tab{data: {action: 'notes'}}
        = link_to project_merge_request_path(@project, @merge_request) do
          %i.icon-comment
          Discussion
      %li.diffs-tab{data: {action: 'diffs'}}
        = link_to diffs_project_merge_request_path(@project, @merge_request) do
          %i.icon-list-alt
          Changes

  - content_for :note_actions do
    - if can?(current_user, :modify_merge_request, @merge_request)
      - unless @merge_request.closed? || @merge_request.merged?
        = link_to 'Close', project_merge_request_path(@project, @merge_request, merge_request: {state_event: :close }), method: :put, class: "btn btn-grouped btn-close close-mr-link", title: "Close merge request"
      - if @merge_request.closed?
        = link_to 'Reopen', project_merge_request_path(@project, @merge_request, merge_request: {state_event: :reopen }), method: :put, class: "btn btn-grouped btn-reopen reopen-mr-link", title: "Close merge request"

  .notes.tab-content.voting_notes#notes{ class: (controller.action_name == 'show') ? "" : "hide" }
    = render "projects/notes/notes_with_form"
  .diffs.tab-content
    - if current_page?(action: 'diffs')
      = render "projects/merge_requests/show/diffs"
  .status

:javascript
  var merge_request;

  merge_request = new MergeRequest({
    url_to_automerge_check: "#{automerge_check_project_merge_request_path(@project, @merge_request)}",
    check_enable: #{@merge_request.unchecked? ? "true" : "false"},
    url_to_ci_check: "#{ci_status_project_merge_request_path(@project, @merge_request)}",
    ci_enable: #{@project.gitlab_ci? ? "true" : "false"},
    current_status: "#{@merge_request.merge_status_name}",
    action: "#{controller.action_name}"
  });

:javascript
  if(window.location.pathname.match(/merge_requests\/\d+(\/diffs)?$/)) {
    var loc = window.location.pathname;
    var fullBranch = $('.label-branch').eq(0).text();
    var targetBranch = $('.label-branch').eq(1).text();
    var branch = fullBranch.replace(/[^\/]+\//, '');
    var branchDst = fullBranch.split('/')[0];
    var btPostfix = branchDst == 'dev' ? 'dev' : branchDst.replace(/\./g, '');
    var buildTypes = [ 'unit', 'prep', 'layout', 'integration' ].map(function(p) { return p + btPostfix; });
    var $wiki = $('.wiki'), $boxBody = $('.ui-box-body');
    var html = buildTypes.reduce(function(html, build){
      html += '<p><a href="https://teamcity.sbis.ru/viewType.html?buildTypeId=' + build + '&branch=' + encodeURIComponent(branch) + '" class="' + build + '">' +
      '<span class="buildName"></span> (' + branch + ')</a>: ' +
      '<img src="https://teamcity.sbis.ru/app/rest/builds/buildType:' + build + ',branch:' + encodeURIComponent(branch) + '/statusIcon" /> &#8680 ' +
      '<a href="https://teamcity.sbis.ru/viewType.html?buildTypeId=' + build + '&branch=' + encodeURIComponent('<default>') + '" class="' + build + '">' + 
      '<span class="buildName"></span> (' + targetBranch + ')</a>: ' +
      '<img src="https://teamcity.sbis.ru/app/rest/builds/buildType:' + build + '/statusIcon" /></p>';
      return html;
    }, '<h3>Статус сборок по ветке</h3>');
    if(!$wiki.length) {
      var $boxBottom = $('<div></div>', { 'class': 'ui-box-bottom' });
      $boxBottom.append($wiki = $('<div></div>', { 'class': 'wiki' }));
      $boxBody.after($boxBottom);
    }
    $wiki.append(html);
    buildTypes.forEach(function(build){
      $.ajax({
        url: 'https://teamcity.sbis.ru/guestAuth/app/rest/buildTypes/' + build,
        headers: {
          Accept: 'application/json'
        }
      }).done(function(res){
        $('.' + build + ' .buildName').text(res.name);
      });
    })
  }
